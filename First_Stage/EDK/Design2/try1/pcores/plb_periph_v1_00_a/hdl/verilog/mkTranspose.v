//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%					High Performance Computing Lab, Indian Institute of Technology, Bombay(IITB)		%%
//%%										Powai, Mumbai,India												%%
//%=========================================================================================================%%
// %%This is the Intellectual Property of High Performance Computing Laboratory,IIT Bombay, and hence 		%%
// %%should not be used for any monetary benefits without the proper consent of the Institute. However		%%	
// %%it can be used as reference related to academic activities. In the event of publication				%%
// %%the following notice is applicable																		%% 
// %%Copyright(c) 2013 HPC Lab,IIT Bombay.																	%%
// %%The entire notice above must be reproduced on all authorized copies.									%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Project Name	: Project First Phase "SIRC and EDK Based Matrix Multiplication on GF(2)"						%% 
//%% File Name		: mkTranspose.v																		%%
//%% Title 		: 32 bit Transpose Module															%%
//%% Author		: Jeebu Jacob Thomas																	%%
//%% Description	:																						%%
//%% Version		: 00																					%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Thu May 30 12:35:33 IST 2013
//
// Method conflict info:
// Method: a_in
// Conflict-free: o_out, b_in
// Conflicts: a_in
//
// Method: o_out
// Conflict-free: a_in, o_out
// Sequenced after (restricted): b_in
//
// Method: b_in
// Conflict-free: a_in
// Sequenced before (restricted): o_out
// Conflicts: b_in
//
//
// Ports:
// Name                         I/O  size props
// o_out                          O    32
// RDY_o_out                      O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// a_in_m                         I    32
// b_in_f                         I     1
//
// Combinational paths from inputs to outputs:
//   b_in_f -> o_out
//   b_in_f -> RDY_o_out
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkTranspose(CLK,
		   RST_N,

		   a_in_m,

		   o_out,
		   RDY_o_out,

		   b_in_f);
  input  CLK;
  input  RST_N;

  // action method a_in
  input  [31 : 0] a_in_m;

  // value method o_out
  output [31 : 0] o_out;
  output RDY_o_out;

  // action method b_in
  input  b_in_f;

  // signals for module outputs
  wire [31 : 0] o_out;
  wire RDY_o_out;

  // register reg_file_0
  reg [31 : 0] reg_file_0;
  wire [31 : 0] reg_file_0$D_IN;
  wire reg_file_0$EN;

  // register reg_file_1
  reg [31 : 0] reg_file_1;
  wire [31 : 0] reg_file_1$D_IN;
  wire reg_file_1$EN;

  // register reg_file_10
  reg [31 : 0] reg_file_10;
  wire [31 : 0] reg_file_10$D_IN;
  wire reg_file_10$EN;

  // register reg_file_11
  reg [31 : 0] reg_file_11;
  wire [31 : 0] reg_file_11$D_IN;
  wire reg_file_11$EN;

  // register reg_file_12
  reg [31 : 0] reg_file_12;
  wire [31 : 0] reg_file_12$D_IN;
  wire reg_file_12$EN;

  // register reg_file_13
  reg [31 : 0] reg_file_13;
  wire [31 : 0] reg_file_13$D_IN;
  wire reg_file_13$EN;

  // register reg_file_14
  reg [31 : 0] reg_file_14;
  wire [31 : 0] reg_file_14$D_IN;
  wire reg_file_14$EN;

  // register reg_file_15
  reg [31 : 0] reg_file_15;
  wire [31 : 0] reg_file_15$D_IN;
  wire reg_file_15$EN;

  // register reg_file_16
  reg [31 : 0] reg_file_16;
  wire [31 : 0] reg_file_16$D_IN;
  wire reg_file_16$EN;

  // register reg_file_17
  reg [31 : 0] reg_file_17;
  wire [31 : 0] reg_file_17$D_IN;
  wire reg_file_17$EN;

  // register reg_file_18
  reg [31 : 0] reg_file_18;
  wire [31 : 0] reg_file_18$D_IN;
  wire reg_file_18$EN;

  // register reg_file_19
  reg [31 : 0] reg_file_19;
  wire [31 : 0] reg_file_19$D_IN;
  wire reg_file_19$EN;

  // register reg_file_2
  reg [31 : 0] reg_file_2;
  wire [31 : 0] reg_file_2$D_IN;
  wire reg_file_2$EN;

  // register reg_file_20
  reg [31 : 0] reg_file_20;
  wire [31 : 0] reg_file_20$D_IN;
  wire reg_file_20$EN;

  // register reg_file_21
  reg [31 : 0] reg_file_21;
  wire [31 : 0] reg_file_21$D_IN;
  wire reg_file_21$EN;

  // register reg_file_22
  reg [31 : 0] reg_file_22;
  wire [31 : 0] reg_file_22$D_IN;
  wire reg_file_22$EN;

  // register reg_file_23
  reg [31 : 0] reg_file_23;
  wire [31 : 0] reg_file_23$D_IN;
  wire reg_file_23$EN;

  // register reg_file_24
  reg [31 : 0] reg_file_24;
  wire [31 : 0] reg_file_24$D_IN;
  wire reg_file_24$EN;

  // register reg_file_25
  reg [31 : 0] reg_file_25;
  wire [31 : 0] reg_file_25$D_IN;
  wire reg_file_25$EN;

  // register reg_file_26
  reg [31 : 0] reg_file_26;
  wire [31 : 0] reg_file_26$D_IN;
  wire reg_file_26$EN;

  // register reg_file_27
  reg [31 : 0] reg_file_27;
  wire [31 : 0] reg_file_27$D_IN;
  wire reg_file_27$EN;

  // register reg_file_28
  reg [31 : 0] reg_file_28;
  wire [31 : 0] reg_file_28$D_IN;
  wire reg_file_28$EN;

  // register reg_file_29
  reg [31 : 0] reg_file_29;
  wire [31 : 0] reg_file_29$D_IN;
  wire reg_file_29$EN;

  // register reg_file_3
  reg [31 : 0] reg_file_3;
  wire [31 : 0] reg_file_3$D_IN;
  wire reg_file_3$EN;

  // register reg_file_30
  reg [31 : 0] reg_file_30;
  wire [31 : 0] reg_file_30$D_IN;
  wire reg_file_30$EN;

  // register reg_file_31
  reg [31 : 0] reg_file_31;
  wire [31 : 0] reg_file_31$D_IN;
  wire reg_file_31$EN;

  // register reg_file_4
  reg [31 : 0] reg_file_4;
  wire [31 : 0] reg_file_4$D_IN;
  wire reg_file_4$EN;

  // register reg_file_5
  reg [31 : 0] reg_file_5;
  wire [31 : 0] reg_file_5$D_IN;
  wire reg_file_5$EN;

  // register reg_file_6
  reg [31 : 0] reg_file_6;
  wire [31 : 0] reg_file_6$D_IN;
  wire reg_file_6$EN;

  // register reg_file_7
  reg [31 : 0] reg_file_7;
  wire [31 : 0] reg_file_7$D_IN;
  wire reg_file_7$EN;

  // register reg_file_8
  reg [31 : 0] reg_file_8;
  wire [31 : 0] reg_file_8$D_IN;
  wire reg_file_8$EN;

  // register reg_file_9
  reg [31 : 0] reg_file_9;
  wire [31 : 0] reg_file_9$D_IN;
  wire reg_file_9$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_r1,
       CAN_FIRE_RL_r1_1,
       CAN_FIRE_RL_r1_10,
       CAN_FIRE_RL_r1_11,
       CAN_FIRE_RL_r1_12,
       CAN_FIRE_RL_r1_13,
       CAN_FIRE_RL_r1_14,
       CAN_FIRE_RL_r1_15,
       CAN_FIRE_RL_r1_16,
       CAN_FIRE_RL_r1_17,
       CAN_FIRE_RL_r1_18,
       CAN_FIRE_RL_r1_19,
       CAN_FIRE_RL_r1_2,
       CAN_FIRE_RL_r1_20,
       CAN_FIRE_RL_r1_21,
       CAN_FIRE_RL_r1_22,
       CAN_FIRE_RL_r1_23,
       CAN_FIRE_RL_r1_24,
       CAN_FIRE_RL_r1_25,
       CAN_FIRE_RL_r1_26,
       CAN_FIRE_RL_r1_27,
       CAN_FIRE_RL_r1_28,
       CAN_FIRE_RL_r1_29,
       CAN_FIRE_RL_r1_3,
       CAN_FIRE_RL_r1_30,
       CAN_FIRE_RL_r1_31,
       CAN_FIRE_RL_r1_4,
       CAN_FIRE_RL_r1_5,
       CAN_FIRE_RL_r1_6,
       CAN_FIRE_RL_r1_7,
       CAN_FIRE_RL_r1_8,
       CAN_FIRE_RL_r1_9,
       CAN_FIRE_RL_r2,
       CAN_FIRE_a_in,
       CAN_FIRE_b_in,
       WILL_FIRE_RL_r1,
       WILL_FIRE_RL_r1_1,
       WILL_FIRE_RL_r1_10,
       WILL_FIRE_RL_r1_11,
       WILL_FIRE_RL_r1_12,
       WILL_FIRE_RL_r1_13,
       WILL_FIRE_RL_r1_14,
       WILL_FIRE_RL_r1_15,
       WILL_FIRE_RL_r1_16,
       WILL_FIRE_RL_r1_17,
       WILL_FIRE_RL_r1_18,
       WILL_FIRE_RL_r1_19,
       WILL_FIRE_RL_r1_2,
       WILL_FIRE_RL_r1_20,
       WILL_FIRE_RL_r1_21,
       WILL_FIRE_RL_r1_22,
       WILL_FIRE_RL_r1_23,
       WILL_FIRE_RL_r1_24,
       WILL_FIRE_RL_r1_25,
       WILL_FIRE_RL_r1_26,
       WILL_FIRE_RL_r1_27,
       WILL_FIRE_RL_r1_28,
       WILL_FIRE_RL_r1_29,
       WILL_FIRE_RL_r1_3,
       WILL_FIRE_RL_r1_30,
       WILL_FIRE_RL_r1_31,
       WILL_FIRE_RL_r1_4,
       WILL_FIRE_RL_r1_5,
       WILL_FIRE_RL_r1_6,
       WILL_FIRE_RL_r1_7,
       WILL_FIRE_RL_r1_8,
       WILL_FIRE_RL_r1_9,
       WILL_FIRE_RL_r2,
       WILL_FIRE_a_in,
       WILL_FIRE_b_in;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_reg_file_0$write_1__VAL_2,
		MUX_reg_file_1$write_1__VAL_2,
		MUX_reg_file_10$write_1__VAL_2,
		MUX_reg_file_11$write_1__VAL_2,
		MUX_reg_file_12$write_1__VAL_2,
		MUX_reg_file_13$write_1__VAL_2,
		MUX_reg_file_14$write_1__VAL_2,
		MUX_reg_file_15$write_1__VAL_2,
		MUX_reg_file_16$write_1__VAL_2,
		MUX_reg_file_17$write_1__VAL_2,
		MUX_reg_file_18$write_1__VAL_2,
		MUX_reg_file_19$write_1__VAL_2,
		MUX_reg_file_2$write_1__VAL_2,
		MUX_reg_file_20$write_1__VAL_2,
		MUX_reg_file_21$write_1__VAL_2,
		MUX_reg_file_22$write_1__VAL_2,
		MUX_reg_file_23$write_1__VAL_2,
		MUX_reg_file_24$write_1__VAL_2,
		MUX_reg_file_25$write_1__VAL_2,
		MUX_reg_file_26$write_1__VAL_2,
		MUX_reg_file_27$write_1__VAL_2,
		MUX_reg_file_28$write_1__VAL_2,
		MUX_reg_file_29$write_1__VAL_2,
		MUX_reg_file_3$write_1__VAL_2,
		MUX_reg_file_30$write_1__VAL_2,
		MUX_reg_file_31$write_1__VAL_2,
		MUX_reg_file_4$write_1__VAL_2,
		MUX_reg_file_5$write_1__VAL_2,
		MUX_reg_file_6$write_1__VAL_2,
		MUX_reg_file_7$write_1__VAL_2,
		MUX_reg_file_8$write_1__VAL_2,
		MUX_reg_file_9$write_1__VAL_2;

  // remaining internal signals
  wire [31 : 0] IF_reg_file_0_BIT_31_THEN_2147483648_ELSE_0__q1;
  wire [3 : 0] IF_reg_file_0_5_BIT_31_2_THEN_2147483648_ELSE__ETC___d141;

  // action method a_in
  assign CAN_FIRE_a_in = 1'd1 ;
  assign WILL_FIRE_a_in = 1'd1 ;

  // value method o_out
  assign o_out =
	     { IF_reg_file_0_5_BIT_31_2_THEN_2147483648_ELSE__ETC___d141,
	       reg_file_4[31],
	       reg_file_5[31],
	       reg_file_6[31],
	       reg_file_7[31],
	       reg_file_8[31],
	       reg_file_9[31],
	       reg_file_10[31],
	       reg_file_11[31],
	       reg_file_12[31],
	       reg_file_13[31],
	       reg_file_14[31],
	       reg_file_15[31],
	       reg_file_16[31],
	       reg_file_17[31],
	       reg_file_18[31],
	       reg_file_19[31],
	       reg_file_20[31],
	       reg_file_21[31],
	       reg_file_22[31],
	       reg_file_23[31],
	       reg_file_24[31],
	       reg_file_25[31],
	       reg_file_26[31],
	       reg_file_27[31],
	       reg_file_28[31],
	       reg_file_29[31],
	       reg_file_30[31],
	       reg_file_31[31] } ;
  assign RDY_o_out = b_in_f ;

  // action method b_in
  assign CAN_FIRE_b_in = 1'd1 ;
  assign WILL_FIRE_b_in = 1'd1 ;

  // rule RL_r2
  assign CAN_FIRE_RL_r2 = b_in_f ;
  assign WILL_FIRE_RL_r2 = b_in_f ;

  // rule RL_r1
  assign CAN_FIRE_RL_r1 = !b_in_f ;
  assign WILL_FIRE_RL_r1 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_1
  assign CAN_FIRE_RL_r1_1 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_1 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_2
  assign CAN_FIRE_RL_r1_2 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_2 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_3
  assign CAN_FIRE_RL_r1_3 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_3 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_4
  assign CAN_FIRE_RL_r1_4 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_4 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_5
  assign CAN_FIRE_RL_r1_5 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_5 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_6
  assign CAN_FIRE_RL_r1_6 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_6 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_7
  assign CAN_FIRE_RL_r1_7 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_7 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_8
  assign CAN_FIRE_RL_r1_8 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_8 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_9
  assign CAN_FIRE_RL_r1_9 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_9 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_10
  assign CAN_FIRE_RL_r1_10 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_10 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_11
  assign CAN_FIRE_RL_r1_11 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_11 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_12
  assign CAN_FIRE_RL_r1_12 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_12 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_13
  assign CAN_FIRE_RL_r1_13 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_13 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_14
  assign CAN_FIRE_RL_r1_14 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_14 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_15
  assign CAN_FIRE_RL_r1_15 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_15 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_16
  assign CAN_FIRE_RL_r1_16 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_16 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_17
  assign CAN_FIRE_RL_r1_17 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_17 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_18
  assign CAN_FIRE_RL_r1_18 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_18 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_19
  assign CAN_FIRE_RL_r1_19 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_19 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_20
  assign CAN_FIRE_RL_r1_20 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_20 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_21
  assign CAN_FIRE_RL_r1_21 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_21 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_22
  assign CAN_FIRE_RL_r1_22 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_22 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_23
  assign CAN_FIRE_RL_r1_23 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_23 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_24
  assign CAN_FIRE_RL_r1_24 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_24 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_25
  assign CAN_FIRE_RL_r1_25 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_25 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_26
  assign CAN_FIRE_RL_r1_26 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_26 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_27
  assign CAN_FIRE_RL_r1_27 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_27 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_28
  assign CAN_FIRE_RL_r1_28 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_28 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_29
  assign CAN_FIRE_RL_r1_29 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_29 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_30
  assign CAN_FIRE_RL_r1_30 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_30 = CAN_FIRE_RL_r1 ;

  // rule RL_r1_31
  assign CAN_FIRE_RL_r1_31 = CAN_FIRE_RL_r1 ;
  assign WILL_FIRE_RL_r1_31 = CAN_FIRE_RL_r1 ;

  // inputs to muxes for submodule ports
  assign MUX_reg_file_0$write_1__VAL_2 =
	     { reg_file_0[30:0], reg_file_0[31] } ;
  assign MUX_reg_file_1$write_1__VAL_2 =
	     { reg_file_1[30:0], reg_file_1[31] } ;
  assign MUX_reg_file_10$write_1__VAL_2 =
	     { reg_file_10[30:0], reg_file_10[31] } ;
  assign MUX_reg_file_11$write_1__VAL_2 =
	     { reg_file_11[30:0], reg_file_11[31] } ;
  assign MUX_reg_file_12$write_1__VAL_2 =
	     { reg_file_12[30:0], reg_file_12[31] } ;
  assign MUX_reg_file_13$write_1__VAL_2 =
	     { reg_file_13[30:0], reg_file_13[31] } ;
  assign MUX_reg_file_14$write_1__VAL_2 =
	     { reg_file_14[30:0], reg_file_14[31] } ;
  assign MUX_reg_file_15$write_1__VAL_2 =
	     { reg_file_15[30:0], reg_file_15[31] } ;
  assign MUX_reg_file_16$write_1__VAL_2 =
	     { reg_file_16[30:0], reg_file_16[31] } ;
  assign MUX_reg_file_17$write_1__VAL_2 =
	     { reg_file_17[30:0], reg_file_17[31] } ;
  assign MUX_reg_file_18$write_1__VAL_2 =
	     { reg_file_18[30:0], reg_file_18[31] } ;
  assign MUX_reg_file_19$write_1__VAL_2 =
	     { reg_file_19[30:0], reg_file_19[31] } ;
  assign MUX_reg_file_2$write_1__VAL_2 =
	     { reg_file_2[30:0], reg_file_2[31] } ;
  assign MUX_reg_file_20$write_1__VAL_2 =
	     { reg_file_20[30:0], reg_file_20[31] } ;
  assign MUX_reg_file_21$write_1__VAL_2 =
	     { reg_file_21[30:0], reg_file_21[31] } ;
  assign MUX_reg_file_22$write_1__VAL_2 =
	     { reg_file_22[30:0], reg_file_22[31] } ;
  assign MUX_reg_file_23$write_1__VAL_2 =
	     { reg_file_23[30:0], reg_file_23[31] } ;
  assign MUX_reg_file_24$write_1__VAL_2 =
	     { reg_file_24[30:0], reg_file_24[31] } ;
  assign MUX_reg_file_25$write_1__VAL_2 =
	     { reg_file_25[30:0], reg_file_25[31] } ;
  assign MUX_reg_file_26$write_1__VAL_2 =
	     { reg_file_26[30:0], reg_file_26[31] } ;
  assign MUX_reg_file_27$write_1__VAL_2 =
	     { reg_file_27[30:0], reg_file_27[31] } ;
  assign MUX_reg_file_28$write_1__VAL_2 =
	     { reg_file_28[30:0], reg_file_28[31] } ;
  assign MUX_reg_file_29$write_1__VAL_2 =
	     { reg_file_29[30:0], reg_file_29[31] } ;
  assign MUX_reg_file_3$write_1__VAL_2 =
	     { reg_file_3[30:0], reg_file_3[31] } ;
  assign MUX_reg_file_30$write_1__VAL_2 =
	     { reg_file_30[30:0], reg_file_30[31] } ;
  assign MUX_reg_file_31$write_1__VAL_2 =
	     { reg_file_31[30:0], reg_file_31[31] } ;
  assign MUX_reg_file_4$write_1__VAL_2 =
	     { reg_file_4[30:0], reg_file_4[31] } ;
  assign MUX_reg_file_5$write_1__VAL_2 =
	     { reg_file_5[30:0], reg_file_5[31] } ;
  assign MUX_reg_file_6$write_1__VAL_2 =
	     { reg_file_6[30:0], reg_file_6[31] } ;
  assign MUX_reg_file_7$write_1__VAL_2 =
	     { reg_file_7[30:0], reg_file_7[31] } ;
  assign MUX_reg_file_8$write_1__VAL_2 =
	     { reg_file_8[30:0], reg_file_8[31] } ;
  assign MUX_reg_file_9$write_1__VAL_2 =
	     { reg_file_9[30:0], reg_file_9[31] } ;

  // register reg_file_0
  assign reg_file_0$D_IN =
	     WILL_FIRE_RL_r1_31 ? a_in_m : MUX_reg_file_0$write_1__VAL_2 ;
  assign reg_file_0$EN = WILL_FIRE_RL_r1_31 || b_in_f ;

  // register reg_file_1
  assign reg_file_1$D_IN =
	     WILL_FIRE_RL_r1_30 ? reg_file_0 : MUX_reg_file_1$write_1__VAL_2 ;
  assign reg_file_1$EN = WILL_FIRE_RL_r1_30 || b_in_f ;

  // register reg_file_10
  assign reg_file_10$D_IN =
	     WILL_FIRE_RL_r1_21 ?
	       reg_file_9 :
	       MUX_reg_file_10$write_1__VAL_2 ;
  assign reg_file_10$EN = WILL_FIRE_RL_r1_21 || b_in_f ;

  // register reg_file_11
  assign reg_file_11$D_IN =
	     WILL_FIRE_RL_r1_20 ?
	       reg_file_10 :
	       MUX_reg_file_11$write_1__VAL_2 ;
  assign reg_file_11$EN = WILL_FIRE_RL_r1_20 || b_in_f ;

  // register reg_file_12
  assign reg_file_12$D_IN =
	     WILL_FIRE_RL_r1_19 ?
	       reg_file_11 :
	       MUX_reg_file_12$write_1__VAL_2 ;
  assign reg_file_12$EN = WILL_FIRE_RL_r1_19 || b_in_f ;

  // register reg_file_13
  assign reg_file_13$D_IN =
	     WILL_FIRE_RL_r1_18 ?
	       reg_file_12 :
	       MUX_reg_file_13$write_1__VAL_2 ;
  assign reg_file_13$EN = WILL_FIRE_RL_r1_18 || b_in_f ;

  // register reg_file_14
  assign reg_file_14$D_IN =
	     WILL_FIRE_RL_r1_17 ?
	       reg_file_13 :
	       MUX_reg_file_14$write_1__VAL_2 ;
  assign reg_file_14$EN = WILL_FIRE_RL_r1_17 || b_in_f ;

  // register reg_file_15
  assign reg_file_15$D_IN =
	     WILL_FIRE_RL_r1_16 ?
	       reg_file_14 :
	       MUX_reg_file_15$write_1__VAL_2 ;
  assign reg_file_15$EN = WILL_FIRE_RL_r1_16 || b_in_f ;

  // register reg_file_16
  assign reg_file_16$D_IN =
	     WILL_FIRE_RL_r1_15 ?
	       reg_file_15 :
	       MUX_reg_file_16$write_1__VAL_2 ;
  assign reg_file_16$EN = WILL_FIRE_RL_r1_15 || b_in_f ;

  // register reg_file_17
  assign reg_file_17$D_IN =
	     WILL_FIRE_RL_r1_14 ?
	       reg_file_16 :
	       MUX_reg_file_17$write_1__VAL_2 ;
  assign reg_file_17$EN = WILL_FIRE_RL_r1_14 || b_in_f ;

  // register reg_file_18
  assign reg_file_18$D_IN =
	     WILL_FIRE_RL_r1_13 ?
	       reg_file_17 :
	       MUX_reg_file_18$write_1__VAL_2 ;
  assign reg_file_18$EN = WILL_FIRE_RL_r1_13 || b_in_f ;

  // register reg_file_19
  assign reg_file_19$D_IN =
	     WILL_FIRE_RL_r1_12 ?
	       reg_file_18 :
	       MUX_reg_file_19$write_1__VAL_2 ;
  assign reg_file_19$EN = WILL_FIRE_RL_r1_12 || b_in_f ;

  // register reg_file_2
  assign reg_file_2$D_IN =
	     WILL_FIRE_RL_r1_29 ? reg_file_1 : MUX_reg_file_2$write_1__VAL_2 ;
  assign reg_file_2$EN = WILL_FIRE_RL_r1_29 || b_in_f ;

  // register reg_file_20
  assign reg_file_20$D_IN =
	     WILL_FIRE_RL_r1_11 ?
	       reg_file_19 :
	       MUX_reg_file_20$write_1__VAL_2 ;
  assign reg_file_20$EN = WILL_FIRE_RL_r1_11 || b_in_f ;

  // register reg_file_21
  assign reg_file_21$D_IN =
	     WILL_FIRE_RL_r1_10 ?
	       reg_file_20 :
	       MUX_reg_file_21$write_1__VAL_2 ;
  assign reg_file_21$EN = WILL_FIRE_RL_r1_10 || b_in_f ;

  // register reg_file_22
  assign reg_file_22$D_IN =
	     WILL_FIRE_RL_r1_9 ?
	       reg_file_21 :
	       MUX_reg_file_22$write_1__VAL_2 ;
  assign reg_file_22$EN = WILL_FIRE_RL_r1_9 || b_in_f ;

  // register reg_file_23
  assign reg_file_23$D_IN =
	     WILL_FIRE_RL_r1_8 ?
	       reg_file_22 :
	       MUX_reg_file_23$write_1__VAL_2 ;
  assign reg_file_23$EN = WILL_FIRE_RL_r1_8 || b_in_f ;

  // register reg_file_24
  assign reg_file_24$D_IN =
	     WILL_FIRE_RL_r1_7 ?
	       reg_file_23 :
	       MUX_reg_file_24$write_1__VAL_2 ;
  assign reg_file_24$EN = WILL_FIRE_RL_r1_7 || b_in_f ;

  // register reg_file_25
  assign reg_file_25$D_IN =
	     WILL_FIRE_RL_r1_6 ?
	       reg_file_24 :
	       MUX_reg_file_25$write_1__VAL_2 ;
  assign reg_file_25$EN = WILL_FIRE_RL_r1_6 || b_in_f ;

  // register reg_file_26
  assign reg_file_26$D_IN =
	     WILL_FIRE_RL_r1_5 ?
	       reg_file_25 :
	       MUX_reg_file_26$write_1__VAL_2 ;
  assign reg_file_26$EN = WILL_FIRE_RL_r1_5 || b_in_f ;

  // register reg_file_27
  assign reg_file_27$D_IN =
	     WILL_FIRE_RL_r1_4 ?
	       reg_file_26 :
	       MUX_reg_file_27$write_1__VAL_2 ;
  assign reg_file_27$EN = WILL_FIRE_RL_r1_4 || b_in_f ;

  // register reg_file_28
  assign reg_file_28$D_IN =
	     WILL_FIRE_RL_r1_3 ?
	       reg_file_27 :
	       MUX_reg_file_28$write_1__VAL_2 ;
  assign reg_file_28$EN = WILL_FIRE_RL_r1_3 || b_in_f ;

  // register reg_file_29
  assign reg_file_29$D_IN =
	     WILL_FIRE_RL_r1_2 ?
	       reg_file_28 :
	       MUX_reg_file_29$write_1__VAL_2 ;
  assign reg_file_29$EN = WILL_FIRE_RL_r1_2 || b_in_f ;

  // register reg_file_3
  assign reg_file_3$D_IN =
	     WILL_FIRE_RL_r1_28 ? reg_file_2 : MUX_reg_file_3$write_1__VAL_2 ;
  assign reg_file_3$EN = WILL_FIRE_RL_r1_28 || b_in_f ;

  // register reg_file_30
  assign reg_file_30$D_IN =
	     WILL_FIRE_RL_r1_1 ?
	       reg_file_29 :
	       MUX_reg_file_30$write_1__VAL_2 ;
  assign reg_file_30$EN = WILL_FIRE_RL_r1_1 || b_in_f ;

  // register reg_file_31
  assign reg_file_31$D_IN =
	     WILL_FIRE_RL_r1 ? reg_file_30 : MUX_reg_file_31$write_1__VAL_2 ;
  assign reg_file_31$EN = WILL_FIRE_RL_r1 || b_in_f ;

  // register reg_file_4
  assign reg_file_4$D_IN =
	     WILL_FIRE_RL_r1_27 ? reg_file_3 : MUX_reg_file_4$write_1__VAL_2 ;
  assign reg_file_4$EN = WILL_FIRE_RL_r1_27 || b_in_f ;

  // register reg_file_5
  assign reg_file_5$D_IN =
	     WILL_FIRE_RL_r1_26 ? reg_file_4 : MUX_reg_file_5$write_1__VAL_2 ;
  assign reg_file_5$EN = WILL_FIRE_RL_r1_26 || b_in_f ;

  // register reg_file_6
  assign reg_file_6$D_IN =
	     WILL_FIRE_RL_r1_25 ? reg_file_5 : MUX_reg_file_6$write_1__VAL_2 ;
  assign reg_file_6$EN = WILL_FIRE_RL_r1_25 || b_in_f ;

  // register reg_file_7
  assign reg_file_7$D_IN =
	     WILL_FIRE_RL_r1_24 ? reg_file_6 : MUX_reg_file_7$write_1__VAL_2 ;
  assign reg_file_7$EN = WILL_FIRE_RL_r1_24 || b_in_f ;

  // register reg_file_8
  assign reg_file_8$D_IN =
	     WILL_FIRE_RL_r1_23 ? reg_file_7 : MUX_reg_file_8$write_1__VAL_2 ;
  assign reg_file_8$EN = WILL_FIRE_RL_r1_23 || b_in_f ;

  // register reg_file_9
  assign reg_file_9$D_IN =
	     WILL_FIRE_RL_r1_22 ? reg_file_8 : MUX_reg_file_9$write_1__VAL_2 ;
  assign reg_file_9$EN = WILL_FIRE_RL_r1_22 || b_in_f ;

  // remaining internal signals
  assign IF_reg_file_0_5_BIT_31_2_THEN_2147483648_ELSE__ETC___d141 =
	     { IF_reg_file_0_BIT_31_THEN_2147483648_ELSE_0__q1[31],
	       reg_file_1[31],
	       reg_file_2[31],
	       reg_file_3[31] } ;
  assign IF_reg_file_0_BIT_31_THEN_2147483648_ELSE_0__q1 =
	     reg_file_0[31] ? 32'h80000000 : 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        reg_file_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	reg_file_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (reg_file_0$EN)
	  reg_file_0 <= `BSV_ASSIGNMENT_DELAY reg_file_0$D_IN;
	if (reg_file_1$EN)
	  reg_file_1 <= `BSV_ASSIGNMENT_DELAY reg_file_1$D_IN;
	if (reg_file_10$EN)
	  reg_file_10 <= `BSV_ASSIGNMENT_DELAY reg_file_10$D_IN;
	if (reg_file_11$EN)
	  reg_file_11 <= `BSV_ASSIGNMENT_DELAY reg_file_11$D_IN;
	if (reg_file_12$EN)
	  reg_file_12 <= `BSV_ASSIGNMENT_DELAY reg_file_12$D_IN;
	if (reg_file_13$EN)
	  reg_file_13 <= `BSV_ASSIGNMENT_DELAY reg_file_13$D_IN;
	if (reg_file_14$EN)
	  reg_file_14 <= `BSV_ASSIGNMENT_DELAY reg_file_14$D_IN;
	if (reg_file_15$EN)
	  reg_file_15 <= `BSV_ASSIGNMENT_DELAY reg_file_15$D_IN;
	if (reg_file_16$EN)
	  reg_file_16 <= `BSV_ASSIGNMENT_DELAY reg_file_16$D_IN;
	if (reg_file_17$EN)
	  reg_file_17 <= `BSV_ASSIGNMENT_DELAY reg_file_17$D_IN;
	if (reg_file_18$EN)
	  reg_file_18 <= `BSV_ASSIGNMENT_DELAY reg_file_18$D_IN;
	if (reg_file_19$EN)
	  reg_file_19 <= `BSV_ASSIGNMENT_DELAY reg_file_19$D_IN;
	if (reg_file_2$EN)
	  reg_file_2 <= `BSV_ASSIGNMENT_DELAY reg_file_2$D_IN;
	if (reg_file_20$EN)
	  reg_file_20 <= `BSV_ASSIGNMENT_DELAY reg_file_20$D_IN;
	if (reg_file_21$EN)
	  reg_file_21 <= `BSV_ASSIGNMENT_DELAY reg_file_21$D_IN;
	if (reg_file_22$EN)
	  reg_file_22 <= `BSV_ASSIGNMENT_DELAY reg_file_22$D_IN;
	if (reg_file_23$EN)
	  reg_file_23 <= `BSV_ASSIGNMENT_DELAY reg_file_23$D_IN;
	if (reg_file_24$EN)
	  reg_file_24 <= `BSV_ASSIGNMENT_DELAY reg_file_24$D_IN;
	if (reg_file_25$EN)
	  reg_file_25 <= `BSV_ASSIGNMENT_DELAY reg_file_25$D_IN;
	if (reg_file_26$EN)
	  reg_file_26 <= `BSV_ASSIGNMENT_DELAY reg_file_26$D_IN;
	if (reg_file_27$EN)
	  reg_file_27 <= `BSV_ASSIGNMENT_DELAY reg_file_27$D_IN;
	if (reg_file_28$EN)
	  reg_file_28 <= `BSV_ASSIGNMENT_DELAY reg_file_28$D_IN;
	if (reg_file_29$EN)
	  reg_file_29 <= `BSV_ASSIGNMENT_DELAY reg_file_29$D_IN;
	if (reg_file_3$EN)
	  reg_file_3 <= `BSV_ASSIGNMENT_DELAY reg_file_3$D_IN;
	if (reg_file_30$EN)
	  reg_file_30 <= `BSV_ASSIGNMENT_DELAY reg_file_30$D_IN;
	if (reg_file_31$EN)
	  reg_file_31 <= `BSV_ASSIGNMENT_DELAY reg_file_31$D_IN;
	if (reg_file_4$EN)
	  reg_file_4 <= `BSV_ASSIGNMENT_DELAY reg_file_4$D_IN;
	if (reg_file_5$EN)
	  reg_file_5 <= `BSV_ASSIGNMENT_DELAY reg_file_5$D_IN;
	if (reg_file_6$EN)
	  reg_file_6 <= `BSV_ASSIGNMENT_DELAY reg_file_6$D_IN;
	if (reg_file_7$EN)
	  reg_file_7 <= `BSV_ASSIGNMENT_DELAY reg_file_7$D_IN;
	if (reg_file_8$EN)
	  reg_file_8 <= `BSV_ASSIGNMENT_DELAY reg_file_8$D_IN;
	if (reg_file_9$EN)
	  reg_file_9 <= `BSV_ASSIGNMENT_DELAY reg_file_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    reg_file_0 = 32'hAAAAAAAA;
    reg_file_1 = 32'hAAAAAAAA;
    reg_file_10 = 32'hAAAAAAAA;
    reg_file_11 = 32'hAAAAAAAA;
    reg_file_12 = 32'hAAAAAAAA;
    reg_file_13 = 32'hAAAAAAAA;
    reg_file_14 = 32'hAAAAAAAA;
    reg_file_15 = 32'hAAAAAAAA;
    reg_file_16 = 32'hAAAAAAAA;
    reg_file_17 = 32'hAAAAAAAA;
    reg_file_18 = 32'hAAAAAAAA;
    reg_file_19 = 32'hAAAAAAAA;
    reg_file_2 = 32'hAAAAAAAA;
    reg_file_20 = 32'hAAAAAAAA;
    reg_file_21 = 32'hAAAAAAAA;
    reg_file_22 = 32'hAAAAAAAA;
    reg_file_23 = 32'hAAAAAAAA;
    reg_file_24 = 32'hAAAAAAAA;
    reg_file_25 = 32'hAAAAAAAA;
    reg_file_26 = 32'hAAAAAAAA;
    reg_file_27 = 32'hAAAAAAAA;
    reg_file_28 = 32'hAAAAAAAA;
    reg_file_29 = 32'hAAAAAAAA;
    reg_file_3 = 32'hAAAAAAAA;
    reg_file_30 = 32'hAAAAAAAA;
    reg_file_31 = 32'hAAAAAAAA;
    reg_file_4 = 32'hAAAAAAAA;
    reg_file_5 = 32'hAAAAAAAA;
    reg_file_6 = 32'hAAAAAAAA;
    reg_file_7 = 32'hAAAAAAAA;
    reg_file_8 = 32'hAAAAAAAA;
    reg_file_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTranspose

