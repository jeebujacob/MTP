//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Thu May 30 12:38:40 IST 2013
//
// Method conflict info:
// Method: data_in
// Sequenced before (restricted): o_out
// Conflicts: data_in
//
// Method: o_out
// Conflict-free: o_out
// Sequenced after (restricted): data_in
//
//
// Ports:
// Name                         I/O  size props
// o_out                          O    32 reg
// RDY_o_out                      O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// data_in_x                      I    32
// data_in_y                      I    32
// data_in_sel                    I     1
// EN_data_in                     I     1
//
// Combinational paths from inputs to outputs:
//   (data_in_sel, EN_data_in) -> RDY_o_out
//   EN_data_in -> o_out
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkOA(CLK,
	    RST_N,

	    data_in_x,
	    data_in_y,
	    data_in_sel,
	    EN_data_in,

	    o_out,
	    RDY_o_out);
  input  CLK;
  input  RST_N;

  // action method data_in
  input  [31 : 0] data_in_x;
  input  [31 : 0] data_in_y;
  input  data_in_sel;
  input  EN_data_in;

  // value method o_out
  output [31 : 0] o_out;
  output RDY_o_out;

  // signals for module outputs
  wire [31 : 0] o_out;
  wire RDY_o_out;

  // register o_0
  reg [31 : 0] o_0;
  wire [31 : 0] o_0$D_IN;
  wire o_0$EN;

  // register o_1
  reg [31 : 0] o_1;
  wire [31 : 0] o_1$D_IN;
  wire o_1$EN;

  // register o_10
  reg [31 : 0] o_10;
  wire [31 : 0] o_10$D_IN;
  wire o_10$EN;

  // register o_11
  reg [31 : 0] o_11;
  wire [31 : 0] o_11$D_IN;
  wire o_11$EN;

  // register o_12
  reg [31 : 0] o_12;
  wire [31 : 0] o_12$D_IN;
  wire o_12$EN;

  // register o_13
  reg [31 : 0] o_13;
  wire [31 : 0] o_13$D_IN;
  wire o_13$EN;

  // register o_14
  reg [31 : 0] o_14;
  wire [31 : 0] o_14$D_IN;
  wire o_14$EN;

  // register o_15
  reg [31 : 0] o_15;
  wire [31 : 0] o_15$D_IN;
  wire o_15$EN;

  // register o_16
  reg [31 : 0] o_16;
  wire [31 : 0] o_16$D_IN;
  wire o_16$EN;

  // register o_17
  reg [31 : 0] o_17;
  wire [31 : 0] o_17$D_IN;
  wire o_17$EN;

  // register o_18
  reg [31 : 0] o_18;
  wire [31 : 0] o_18$D_IN;
  wire o_18$EN;

  // register o_19
  reg [31 : 0] o_19;
  wire [31 : 0] o_19$D_IN;
  wire o_19$EN;

  // register o_2
  reg [31 : 0] o_2;
  wire [31 : 0] o_2$D_IN;
  wire o_2$EN;

  // register o_20
  reg [31 : 0] o_20;
  wire [31 : 0] o_20$D_IN;
  wire o_20$EN;

  // register o_21
  reg [31 : 0] o_21;
  wire [31 : 0] o_21$D_IN;
  wire o_21$EN;

  // register o_22
  reg [31 : 0] o_22;
  wire [31 : 0] o_22$D_IN;
  wire o_22$EN;

  // register o_23
  reg [31 : 0] o_23;
  wire [31 : 0] o_23$D_IN;
  wire o_23$EN;

  // register o_24
  reg [31 : 0] o_24;
  wire [31 : 0] o_24$D_IN;
  wire o_24$EN;

  // register o_25
  reg [31 : 0] o_25;
  wire [31 : 0] o_25$D_IN;
  wire o_25$EN;

  // register o_26
  reg [31 : 0] o_26;
  wire [31 : 0] o_26$D_IN;
  wire o_26$EN;

  // register o_27
  reg [31 : 0] o_27;
  wire [31 : 0] o_27$D_IN;
  wire o_27$EN;

  // register o_28
  reg [31 : 0] o_28;
  wire [31 : 0] o_28$D_IN;
  wire o_28$EN;

  // register o_29
  reg [31 : 0] o_29;
  wire [31 : 0] o_29$D_IN;
  wire o_29$EN;

  // register o_3
  reg [31 : 0] o_3;
  wire [31 : 0] o_3$D_IN;
  wire o_3$EN;

  // register o_30
  reg [31 : 0] o_30;
  wire [31 : 0] o_30$D_IN;
  wire o_30$EN;

  // register o_31
  reg [31 : 0] o_31;
  wire [31 : 0] o_31$D_IN;
  wire o_31$EN;

  // register o_4
  reg [31 : 0] o_4;
  wire [31 : 0] o_4$D_IN;
  wire o_4$EN;

  // register o_5
  reg [31 : 0] o_5;
  wire [31 : 0] o_5$D_IN;
  wire o_5$EN;

  // register o_6
  reg [31 : 0] o_6;
  wire [31 : 0] o_6$D_IN;
  wire o_6$EN;

  // register o_7
  reg [31 : 0] o_7;
  wire [31 : 0] o_7$D_IN;
  wire o_7$EN;

  // register o_8
  reg [31 : 0] o_8;
  wire [31 : 0] o_8$D_IN;
  wire o_8$EN;

  // register o_9
  reg [31 : 0] o_9;
  wire [31 : 0] o_9$D_IN;
  wire o_9$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_r1,
       CAN_FIRE_RL_r1_1,
       CAN_FIRE_RL_r1_10,
       CAN_FIRE_RL_r1_11,
       CAN_FIRE_RL_r1_12,
       CAN_FIRE_RL_r1_13,
       CAN_FIRE_RL_r1_14,
       CAN_FIRE_RL_r1_15,
       CAN_FIRE_RL_r1_16,
       CAN_FIRE_RL_r1_17,
       CAN_FIRE_RL_r1_18,
       CAN_FIRE_RL_r1_19,
       CAN_FIRE_RL_r1_2,
       CAN_FIRE_RL_r1_20,
       CAN_FIRE_RL_r1_21,
       CAN_FIRE_RL_r1_22,
       CAN_FIRE_RL_r1_23,
       CAN_FIRE_RL_r1_24,
       CAN_FIRE_RL_r1_25,
       CAN_FIRE_RL_r1_26,
       CAN_FIRE_RL_r1_27,
       CAN_FIRE_RL_r1_28,
       CAN_FIRE_RL_r1_29,
       CAN_FIRE_RL_r1_3,
       CAN_FIRE_RL_r1_30,
       CAN_FIRE_RL_r1_31,
       CAN_FIRE_RL_r1_4,
       CAN_FIRE_RL_r1_5,
       CAN_FIRE_RL_r1_6,
       CAN_FIRE_RL_r1_7,
       CAN_FIRE_RL_r1_8,
       CAN_FIRE_RL_r1_9,
       CAN_FIRE_RL_r2,
       CAN_FIRE_RL_r2_1,
       CAN_FIRE_RL_r2_10,
       CAN_FIRE_RL_r2_11,
       CAN_FIRE_RL_r2_12,
       CAN_FIRE_RL_r2_13,
       CAN_FIRE_RL_r2_14,
       CAN_FIRE_RL_r2_15,
       CAN_FIRE_RL_r2_16,
       CAN_FIRE_RL_r2_17,
       CAN_FIRE_RL_r2_18,
       CAN_FIRE_RL_r2_19,
       CAN_FIRE_RL_r2_2,
       CAN_FIRE_RL_r2_20,
       CAN_FIRE_RL_r2_21,
       CAN_FIRE_RL_r2_22,
       CAN_FIRE_RL_r2_23,
       CAN_FIRE_RL_r2_24,
       CAN_FIRE_RL_r2_25,
       CAN_FIRE_RL_r2_26,
       CAN_FIRE_RL_r2_27,
       CAN_FIRE_RL_r2_28,
       CAN_FIRE_RL_r2_29,
       CAN_FIRE_RL_r2_3,
       CAN_FIRE_RL_r2_30,
       CAN_FIRE_RL_r2_31,
       CAN_FIRE_RL_r2_4,
       CAN_FIRE_RL_r2_5,
       CAN_FIRE_RL_r2_6,
       CAN_FIRE_RL_r2_7,
       CAN_FIRE_RL_r2_8,
       CAN_FIRE_RL_r2_9,
       CAN_FIRE_data_in,
       WILL_FIRE_RL_r1,
       WILL_FIRE_RL_r1_1,
       WILL_FIRE_RL_r1_10,
       WILL_FIRE_RL_r1_11,
       WILL_FIRE_RL_r1_12,
       WILL_FIRE_RL_r1_13,
       WILL_FIRE_RL_r1_14,
       WILL_FIRE_RL_r1_15,
       WILL_FIRE_RL_r1_16,
       WILL_FIRE_RL_r1_17,
       WILL_FIRE_RL_r1_18,
       WILL_FIRE_RL_r1_19,
       WILL_FIRE_RL_r1_2,
       WILL_FIRE_RL_r1_20,
       WILL_FIRE_RL_r1_21,
       WILL_FIRE_RL_r1_22,
       WILL_FIRE_RL_r1_23,
       WILL_FIRE_RL_r1_24,
       WILL_FIRE_RL_r1_25,
       WILL_FIRE_RL_r1_26,
       WILL_FIRE_RL_r1_27,
       WILL_FIRE_RL_r1_28,
       WILL_FIRE_RL_r1_29,
       WILL_FIRE_RL_r1_3,
       WILL_FIRE_RL_r1_30,
       WILL_FIRE_RL_r1_31,
       WILL_FIRE_RL_r1_4,
       WILL_FIRE_RL_r1_5,
       WILL_FIRE_RL_r1_6,
       WILL_FIRE_RL_r1_7,
       WILL_FIRE_RL_r1_8,
       WILL_FIRE_RL_r1_9,
       WILL_FIRE_RL_r2,
       WILL_FIRE_RL_r2_1,
       WILL_FIRE_RL_r2_10,
       WILL_FIRE_RL_r2_11,
       WILL_FIRE_RL_r2_12,
       WILL_FIRE_RL_r2_13,
       WILL_FIRE_RL_r2_14,
       WILL_FIRE_RL_r2_15,
       WILL_FIRE_RL_r2_16,
       WILL_FIRE_RL_r2_17,
       WILL_FIRE_RL_r2_18,
       WILL_FIRE_RL_r2_19,
       WILL_FIRE_RL_r2_2,
       WILL_FIRE_RL_r2_20,
       WILL_FIRE_RL_r2_21,
       WILL_FIRE_RL_r2_22,
       WILL_FIRE_RL_r2_23,
       WILL_FIRE_RL_r2_24,
       WILL_FIRE_RL_r2_25,
       WILL_FIRE_RL_r2_26,
       WILL_FIRE_RL_r2_27,
       WILL_FIRE_RL_r2_28,
       WILL_FIRE_RL_r2_29,
       WILL_FIRE_RL_r2_3,
       WILL_FIRE_RL_r2_30,
       WILL_FIRE_RL_r2_31,
       WILL_FIRE_RL_r2_4,
       WILL_FIRE_RL_r2_5,
       WILL_FIRE_RL_r2_6,
       WILL_FIRE_RL_r2_7,
       WILL_FIRE_RL_r2_8,
       WILL_FIRE_RL_r2_9,
       WILL_FIRE_data_in;

  // remaining internal signals
  wire [31 : 0] x__h10064,
		x__h10339,
		x__h10614,
		x__h10889,
		x__h11164,
		x__h11439,
		x__h11714,
		x__h11989,
		x__h12264,
		x__h12539,
		x__h12814,
		x__h13089,
		x__h13364,
		x__h13639,
		x__h13914,
		x__h14189,
		x__h14464,
		x__h14739,
		x__h15014,
		x__h15278,
		x__h6795,
		x__h7039,
		x__h7314,
		x__h7589,
		x__h7864,
		x__h8139,
		x__h8414,
		x__h8689,
		x__h8964,
		x__h9239,
		x__h9514,
		x__h9789,
		x__read__h1136,
		x__read__h1284,
		x__read__h1432,
		x__read__h1580,
		x__read__h1728,
		x__read__h1876,
		x__read__h2024,
		x__read__h2172,
		x__read__h2320,
		x__read__h2468,
		x__read__h2616,
		x__read__h2764,
		x__read__h2912,
		x__read__h3060,
		x__read__h3208,
		x__read__h3356,
		x__read__h3504,
		x__read__h3652,
		x__read__h3800,
		x__read__h3948,
		x__read__h396,
		x__read__h4096,
		x__read__h4244,
		x__read__h4392,
		x__read__h4540,
		x__read__h4688,
		x__read__h4836,
		x__read__h4984,
		x__read__h544,
		x__read__h692,
		x__read__h840,
		x__read__h988;

  // action method data_in
  assign CAN_FIRE_data_in = 1'd1 ;
  assign WILL_FIRE_data_in = EN_data_in ;

  // value method o_out
  assign o_out = o_31 ;
  assign RDY_o_out = EN_data_in && data_in_sel ;

  // rule RL_r1_31
  assign CAN_FIRE_RL_r1_31 = EN_data_in ;
  assign WILL_FIRE_RL_r1_31 = EN_data_in ;

  // rule RL_r2_31
  assign CAN_FIRE_RL_r2_31 = EN_data_in ;
  assign WILL_FIRE_RL_r2_31 = EN_data_in ;

  // rule RL_r1
  assign CAN_FIRE_RL_r1 = EN_data_in ;
  assign WILL_FIRE_RL_r1 = EN_data_in ;

  // rule RL_r1_1
  assign CAN_FIRE_RL_r1_1 = EN_data_in ;
  assign WILL_FIRE_RL_r1_1 = EN_data_in ;

  // rule RL_r1_2
  assign CAN_FIRE_RL_r1_2 = EN_data_in ;
  assign WILL_FIRE_RL_r1_2 = EN_data_in ;

  // rule RL_r1_3
  assign CAN_FIRE_RL_r1_3 = EN_data_in ;
  assign WILL_FIRE_RL_r1_3 = EN_data_in ;

  // rule RL_r1_4
  assign CAN_FIRE_RL_r1_4 = EN_data_in ;
  assign WILL_FIRE_RL_r1_4 = EN_data_in ;

  // rule RL_r1_5
  assign CAN_FIRE_RL_r1_5 = EN_data_in ;
  assign WILL_FIRE_RL_r1_5 = EN_data_in ;

  // rule RL_r1_6
  assign CAN_FIRE_RL_r1_6 = EN_data_in ;
  assign WILL_FIRE_RL_r1_6 = EN_data_in ;

  // rule RL_r1_7
  assign CAN_FIRE_RL_r1_7 = EN_data_in ;
  assign WILL_FIRE_RL_r1_7 = EN_data_in ;

  // rule RL_r1_8
  assign CAN_FIRE_RL_r1_8 = EN_data_in ;
  assign WILL_FIRE_RL_r1_8 = EN_data_in ;

  // rule RL_r1_9
  assign CAN_FIRE_RL_r1_9 = EN_data_in ;
  assign WILL_FIRE_RL_r1_9 = EN_data_in ;

  // rule RL_r1_10
  assign CAN_FIRE_RL_r1_10 = EN_data_in ;
  assign WILL_FIRE_RL_r1_10 = EN_data_in ;

  // rule RL_r1_11
  assign CAN_FIRE_RL_r1_11 = EN_data_in ;
  assign WILL_FIRE_RL_r1_11 = EN_data_in ;

  // rule RL_r1_12
  assign CAN_FIRE_RL_r1_12 = EN_data_in ;
  assign WILL_FIRE_RL_r1_12 = EN_data_in ;

  // rule RL_r1_13
  assign CAN_FIRE_RL_r1_13 = EN_data_in ;
  assign WILL_FIRE_RL_r1_13 = EN_data_in ;

  // rule RL_r1_14
  assign CAN_FIRE_RL_r1_14 = EN_data_in ;
  assign WILL_FIRE_RL_r1_14 = EN_data_in ;

  // rule RL_r1_15
  assign CAN_FIRE_RL_r1_15 = EN_data_in ;
  assign WILL_FIRE_RL_r1_15 = EN_data_in ;

  // rule RL_r1_16
  assign CAN_FIRE_RL_r1_16 = EN_data_in ;
  assign WILL_FIRE_RL_r1_16 = EN_data_in ;

  // rule RL_r1_17
  assign CAN_FIRE_RL_r1_17 = EN_data_in ;
  assign WILL_FIRE_RL_r1_17 = EN_data_in ;

  // rule RL_r1_18
  assign CAN_FIRE_RL_r1_18 = EN_data_in ;
  assign WILL_FIRE_RL_r1_18 = EN_data_in ;

  // rule RL_r1_19
  assign CAN_FIRE_RL_r1_19 = EN_data_in ;
  assign WILL_FIRE_RL_r1_19 = EN_data_in ;

  // rule RL_r1_20
  assign CAN_FIRE_RL_r1_20 = EN_data_in ;
  assign WILL_FIRE_RL_r1_20 = EN_data_in ;

  // rule RL_r1_21
  assign CAN_FIRE_RL_r1_21 = EN_data_in ;
  assign WILL_FIRE_RL_r1_21 = EN_data_in ;

  // rule RL_r1_22
  assign CAN_FIRE_RL_r1_22 = EN_data_in ;
  assign WILL_FIRE_RL_r1_22 = EN_data_in ;

  // rule RL_r1_23
  assign CAN_FIRE_RL_r1_23 = EN_data_in ;
  assign WILL_FIRE_RL_r1_23 = EN_data_in ;

  // rule RL_r1_24
  assign CAN_FIRE_RL_r1_24 = EN_data_in ;
  assign WILL_FIRE_RL_r1_24 = EN_data_in ;

  // rule RL_r1_25
  assign CAN_FIRE_RL_r1_25 = EN_data_in ;
  assign WILL_FIRE_RL_r1_25 = EN_data_in ;

  // rule RL_r1_26
  assign CAN_FIRE_RL_r1_26 = EN_data_in ;
  assign WILL_FIRE_RL_r1_26 = EN_data_in ;

  // rule RL_r1_27
  assign CAN_FIRE_RL_r1_27 = EN_data_in ;
  assign WILL_FIRE_RL_r1_27 = EN_data_in ;

  // rule RL_r1_28
  assign CAN_FIRE_RL_r1_28 = EN_data_in ;
  assign WILL_FIRE_RL_r1_28 = EN_data_in ;

  // rule RL_r1_29
  assign CAN_FIRE_RL_r1_29 = EN_data_in ;
  assign WILL_FIRE_RL_r1_29 = EN_data_in ;

  // rule RL_r1_30
  assign CAN_FIRE_RL_r1_30 = EN_data_in ;
  assign WILL_FIRE_RL_r1_30 = EN_data_in ;

  // rule RL_r2_30
  assign CAN_FIRE_RL_r2_30 = EN_data_in ;
  assign WILL_FIRE_RL_r2_30 = EN_data_in ;

  // rule RL_r2_29
  assign CAN_FIRE_RL_r2_29 = EN_data_in ;
  assign WILL_FIRE_RL_r2_29 = EN_data_in ;

  // rule RL_r2_28
  assign CAN_FIRE_RL_r2_28 = EN_data_in ;
  assign WILL_FIRE_RL_r2_28 = EN_data_in ;

  // rule RL_r2_27
  assign CAN_FIRE_RL_r2_27 = EN_data_in ;
  assign WILL_FIRE_RL_r2_27 = EN_data_in ;

  // rule RL_r2_26
  assign CAN_FIRE_RL_r2_26 = EN_data_in ;
  assign WILL_FIRE_RL_r2_26 = EN_data_in ;

  // rule RL_r2_25
  assign CAN_FIRE_RL_r2_25 = EN_data_in ;
  assign WILL_FIRE_RL_r2_25 = EN_data_in ;

  // rule RL_r2_24
  assign CAN_FIRE_RL_r2_24 = EN_data_in ;
  assign WILL_FIRE_RL_r2_24 = EN_data_in ;

  // rule RL_r2_23
  assign CAN_FIRE_RL_r2_23 = EN_data_in ;
  assign WILL_FIRE_RL_r2_23 = EN_data_in ;

  // rule RL_r2_22
  assign CAN_FIRE_RL_r2_22 = EN_data_in ;
  assign WILL_FIRE_RL_r2_22 = EN_data_in ;

  // rule RL_r2_21
  assign CAN_FIRE_RL_r2_21 = EN_data_in ;
  assign WILL_FIRE_RL_r2_21 = EN_data_in ;

  // rule RL_r2_20
  assign CAN_FIRE_RL_r2_20 = EN_data_in ;
  assign WILL_FIRE_RL_r2_20 = EN_data_in ;

  // rule RL_r2_19
  assign CAN_FIRE_RL_r2_19 = EN_data_in ;
  assign WILL_FIRE_RL_r2_19 = EN_data_in ;

  // rule RL_r2_18
  assign CAN_FIRE_RL_r2_18 = EN_data_in ;
  assign WILL_FIRE_RL_r2_18 = EN_data_in ;

  // rule RL_r2_17
  assign CAN_FIRE_RL_r2_17 = EN_data_in ;
  assign WILL_FIRE_RL_r2_17 = EN_data_in ;

  // rule RL_r2_16
  assign CAN_FIRE_RL_r2_16 = EN_data_in ;
  assign WILL_FIRE_RL_r2_16 = EN_data_in ;

  // rule RL_r2_15
  assign CAN_FIRE_RL_r2_15 = EN_data_in ;
  assign WILL_FIRE_RL_r2_15 = EN_data_in ;

  // rule RL_r2_14
  assign CAN_FIRE_RL_r2_14 = EN_data_in ;
  assign WILL_FIRE_RL_r2_14 = EN_data_in ;

  // rule RL_r2_13
  assign CAN_FIRE_RL_r2_13 = EN_data_in ;
  assign WILL_FIRE_RL_r2_13 = EN_data_in ;

  // rule RL_r2_12
  assign CAN_FIRE_RL_r2_12 = EN_data_in ;
  assign WILL_FIRE_RL_r2_12 = EN_data_in ;

  // rule RL_r2_11
  assign CAN_FIRE_RL_r2_11 = EN_data_in ;
  assign WILL_FIRE_RL_r2_11 = EN_data_in ;

  // rule RL_r2_10
  assign CAN_FIRE_RL_r2_10 = EN_data_in ;
  assign WILL_FIRE_RL_r2_10 = EN_data_in ;

  // rule RL_r2_9
  assign CAN_FIRE_RL_r2_9 = EN_data_in ;
  assign WILL_FIRE_RL_r2_9 = EN_data_in ;

  // rule RL_r2_8
  assign CAN_FIRE_RL_r2_8 = EN_data_in ;
  assign WILL_FIRE_RL_r2_8 = EN_data_in ;

  // rule RL_r2_7
  assign CAN_FIRE_RL_r2_7 = EN_data_in ;
  assign WILL_FIRE_RL_r2_7 = EN_data_in ;

  // rule RL_r2_6
  assign CAN_FIRE_RL_r2_6 = EN_data_in ;
  assign WILL_FIRE_RL_r2_6 = EN_data_in ;

  // rule RL_r2_5
  assign CAN_FIRE_RL_r2_5 = EN_data_in ;
  assign WILL_FIRE_RL_r2_5 = EN_data_in ;

  // rule RL_r2_4
  assign CAN_FIRE_RL_r2_4 = EN_data_in ;
  assign WILL_FIRE_RL_r2_4 = EN_data_in ;

  // rule RL_r2_3
  assign CAN_FIRE_RL_r2_3 = EN_data_in ;
  assign WILL_FIRE_RL_r2_3 = EN_data_in ;

  // rule RL_r2_2
  assign CAN_FIRE_RL_r2_2 = EN_data_in ;
  assign WILL_FIRE_RL_r2_2 = EN_data_in ;

  // rule RL_r2_1
  assign CAN_FIRE_RL_r2_1 = EN_data_in ;
  assign WILL_FIRE_RL_r2_1 = EN_data_in ;

  // rule RL_r2
  assign CAN_FIRE_RL_r2 = EN_data_in ;
  assign WILL_FIRE_RL_r2 = EN_data_in ;

  // register o_0
  assign o_0$D_IN = data_in_sel ? 32'd0 : x__h6795 ;
  assign o_0$EN = EN_data_in ;

  // register o_1
  assign o_1$D_IN = data_in_sel ? o_0 : x__h7039 ;
  assign o_1$EN = EN_data_in ;

  // register o_10
  assign o_10$D_IN = data_in_sel ? o_9 : x__h9514 ;
  assign o_10$EN = EN_data_in ;

  // register o_11
  assign o_11$D_IN = data_in_sel ? o_10 : x__h9789 ;
  assign o_11$EN = EN_data_in ;

  // register o_12
  assign o_12$D_IN = data_in_sel ? o_11 : x__h10064 ;
  assign o_12$EN = EN_data_in ;

  // register o_13
  assign o_13$D_IN = data_in_sel ? o_12 : x__h10339 ;
  assign o_13$EN = EN_data_in ;

  // register o_14
  assign o_14$D_IN = data_in_sel ? o_13 : x__h10614 ;
  assign o_14$EN = EN_data_in ;

  // register o_15
  assign o_15$D_IN = data_in_sel ? o_14 : x__h10889 ;
  assign o_15$EN = EN_data_in ;

  // register o_16
  assign o_16$D_IN = data_in_sel ? o_15 : x__h11164 ;
  assign o_16$EN = EN_data_in ;

  // register o_17
  assign o_17$D_IN = data_in_sel ? o_16 : x__h11439 ;
  assign o_17$EN = EN_data_in ;

  // register o_18
  assign o_18$D_IN = data_in_sel ? o_17 : x__h11714 ;
  assign o_18$EN = EN_data_in ;

  // register o_19
  assign o_19$D_IN = data_in_sel ? o_18 : x__h11989 ;
  assign o_19$EN = EN_data_in ;

  // register o_2
  assign o_2$D_IN = data_in_sel ? o_1 : x__h7314 ;
  assign o_2$EN = EN_data_in ;

  // register o_20
  assign o_20$D_IN = data_in_sel ? o_19 : x__h12264 ;
  assign o_20$EN = EN_data_in ;

  // register o_21
  assign o_21$D_IN = data_in_sel ? o_20 : x__h12539 ;
  assign o_21$EN = EN_data_in ;

  // register o_22
  assign o_22$D_IN = data_in_sel ? o_21 : x__h12814 ;
  assign o_22$EN = EN_data_in ;

  // register o_23
  assign o_23$D_IN = data_in_sel ? o_22 : x__h13089 ;
  assign o_23$EN = EN_data_in ;

  // register o_24
  assign o_24$D_IN = data_in_sel ? o_23 : x__h13364 ;
  assign o_24$EN = EN_data_in ;

  // register o_25
  assign o_25$D_IN = data_in_sel ? o_24 : x__h13639 ;
  assign o_25$EN = EN_data_in ;

  // register o_26
  assign o_26$D_IN = data_in_sel ? o_25 : x__h13914 ;
  assign o_26$EN = EN_data_in ;

  // register o_27
  assign o_27$D_IN = data_in_sel ? o_26 : x__h14189 ;
  assign o_27$EN = EN_data_in ;

  // register o_28
  assign o_28$D_IN = data_in_sel ? o_27 : x__h14464 ;
  assign o_28$EN = EN_data_in ;

  // register o_29
  assign o_29$D_IN = data_in_sel ? o_28 : x__h14739 ;
  assign o_29$EN = EN_data_in ;

  // register o_3
  assign o_3$D_IN = data_in_sel ? o_2 : x__h7589 ;
  assign o_3$EN = EN_data_in ;

  // register o_30
  assign o_30$D_IN = data_in_sel ? o_29 : x__h15014 ;
  assign o_30$EN = EN_data_in ;

  // register o_31
  assign o_31$D_IN = data_in_sel ? o_30 : x__h15278 ;
  assign o_31$EN = EN_data_in ;

  // register o_4
  assign o_4$D_IN = data_in_sel ? o_3 : x__h7864 ;
  assign o_4$EN = EN_data_in ;

  // register o_5
  assign o_5$D_IN = data_in_sel ? o_4 : x__h8139 ;
  assign o_5$EN = EN_data_in ;

  // register o_6
  assign o_6$D_IN = data_in_sel ? o_5 : x__h8414 ;
  assign o_6$EN = EN_data_in ;

  // register o_7
  assign o_7$D_IN = data_in_sel ? o_6 : x__h8689 ;
  assign o_7$EN = EN_data_in ;

  // register o_8
  assign o_8$D_IN = data_in_sel ? o_7 : x__h8964 ;
  assign o_8$EN = EN_data_in ;

  // register o_9
  assign o_9$D_IN = data_in_sel ? o_8 : x__h9239 ;
  assign o_9$EN = EN_data_in ;

  // remaining internal signals
  assign x__h10064 = o_12 ^ x__read__h2172 ;
  assign x__h10339 = o_13 ^ x__read__h2320 ;
  assign x__h10614 = o_14 ^ x__read__h2468 ;
  assign x__h10889 = o_15 ^ x__read__h2616 ;
  assign x__h11164 = o_16 ^ x__read__h2764 ;
  assign x__h11439 = o_17 ^ x__read__h2912 ;
  assign x__h11714 = o_18 ^ x__read__h3060 ;
  assign x__h11989 = o_19 ^ x__read__h3208 ;
  assign x__h12264 = o_20 ^ x__read__h3356 ;
  assign x__h12539 = o_21 ^ x__read__h3504 ;
  assign x__h12814 = o_22 ^ x__read__h3652 ;
  assign x__h13089 = o_23 ^ x__read__h3800 ;
  assign x__h13364 = o_24 ^ x__read__h3948 ;
  assign x__h13639 = o_25 ^ x__read__h4096 ;
  assign x__h13914 = o_26 ^ x__read__h4244 ;
  assign x__h14189 = o_27 ^ x__read__h4392 ;
  assign x__h14464 = o_28 ^ x__read__h4540 ;
  assign x__h14739 = o_29 ^ x__read__h4688 ;
  assign x__h15014 = o_30 ^ x__read__h4836 ;
  assign x__h15278 = o_31 ^ x__read__h4984 ;
  assign x__h6795 = o_0 ^ x__read__h396 ;
  assign x__h7039 = o_1 ^ x__read__h544 ;
  assign x__h7314 = o_2 ^ x__read__h692 ;
  assign x__h7589 = o_3 ^ x__read__h840 ;
  assign x__h7864 = o_4 ^ x__read__h988 ;
  assign x__h8139 = o_5 ^ x__read__h1136 ;
  assign x__h8414 = o_6 ^ x__read__h1284 ;
  assign x__h8689 = o_7 ^ x__read__h1432 ;
  assign x__h8964 = o_8 ^ x__read__h1580 ;
  assign x__h9239 = o_9 ^ x__read__h1728 ;
  assign x__h9514 = o_10 ^ x__read__h1876 ;
  assign x__h9789 = o_11 ^ x__read__h2024 ;
  assign x__read__h1136 = data_in_x[5] ? data_in_y : 32'd0 ;
  assign x__read__h1284 = data_in_x[6] ? data_in_y : 32'd0 ;
  assign x__read__h1432 = data_in_x[7] ? data_in_y : 32'd0 ;
  assign x__read__h1580 = data_in_x[8] ? data_in_y : 32'd0 ;
  assign x__read__h1728 = data_in_x[9] ? data_in_y : 32'd0 ;
  assign x__read__h1876 = data_in_x[10] ? data_in_y : 32'd0 ;
  assign x__read__h2024 = data_in_x[11] ? data_in_y : 32'd0 ;
  assign x__read__h2172 = data_in_x[12] ? data_in_y : 32'd0 ;
  assign x__read__h2320 = data_in_x[13] ? data_in_y : 32'd0 ;
  assign x__read__h2468 = data_in_x[14] ? data_in_y : 32'd0 ;
  assign x__read__h2616 = data_in_x[15] ? data_in_y : 32'd0 ;
  assign x__read__h2764 = data_in_x[16] ? data_in_y : 32'd0 ;
  assign x__read__h2912 = data_in_x[17] ? data_in_y : 32'd0 ;
  assign x__read__h3060 = data_in_x[18] ? data_in_y : 32'd0 ;
  assign x__read__h3208 = data_in_x[19] ? data_in_y : 32'd0 ;
  assign x__read__h3356 = data_in_x[20] ? data_in_y : 32'd0 ;
  assign x__read__h3504 = data_in_x[21] ? data_in_y : 32'd0 ;
  assign x__read__h3652 = data_in_x[22] ? data_in_y : 32'd0 ;
  assign x__read__h3800 = data_in_x[23] ? data_in_y : 32'd0 ;
  assign x__read__h3948 = data_in_x[24] ? data_in_y : 32'd0 ;
  assign x__read__h396 = data_in_x[0] ? data_in_y : 32'd0 ;
  assign x__read__h4096 = data_in_x[25] ? data_in_y : 32'd0 ;
  assign x__read__h4244 = data_in_x[26] ? data_in_y : 32'd0 ;
  assign x__read__h4392 = data_in_x[27] ? data_in_y : 32'd0 ;
  assign x__read__h4540 = data_in_x[28] ? data_in_y : 32'd0 ;
  assign x__read__h4688 = data_in_x[29] ? data_in_y : 32'd0 ;
  assign x__read__h4836 = data_in_x[30] ? data_in_y : 32'd0 ;
  assign x__read__h4984 = data_in_x[31] ? data_in_y : 32'd0 ;
  assign x__read__h544 = data_in_x[1] ? data_in_y : 32'd0 ;
  assign x__read__h692 = data_in_x[2] ? data_in_y : 32'd0 ;
  assign x__read__h840 = data_in_x[3] ? data_in_y : 32'd0 ;
  assign x__read__h988 = data_in_x[4] ? data_in_y : 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        o_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	o_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (o_0$EN) o_0 <= `BSV_ASSIGNMENT_DELAY o_0$D_IN;
	if (o_1$EN) o_1 <= `BSV_ASSIGNMENT_DELAY o_1$D_IN;
	if (o_10$EN) o_10 <= `BSV_ASSIGNMENT_DELAY o_10$D_IN;
	if (o_11$EN) o_11 <= `BSV_ASSIGNMENT_DELAY o_11$D_IN;
	if (o_12$EN) o_12 <= `BSV_ASSIGNMENT_DELAY o_12$D_IN;
	if (o_13$EN) o_13 <= `BSV_ASSIGNMENT_DELAY o_13$D_IN;
	if (o_14$EN) o_14 <= `BSV_ASSIGNMENT_DELAY o_14$D_IN;
	if (o_15$EN) o_15 <= `BSV_ASSIGNMENT_DELAY o_15$D_IN;
	if (o_16$EN) o_16 <= `BSV_ASSIGNMENT_DELAY o_16$D_IN;
	if (o_17$EN) o_17 <= `BSV_ASSIGNMENT_DELAY o_17$D_IN;
	if (o_18$EN) o_18 <= `BSV_ASSIGNMENT_DELAY o_18$D_IN;
	if (o_19$EN) o_19 <= `BSV_ASSIGNMENT_DELAY o_19$D_IN;
	if (o_2$EN) o_2 <= `BSV_ASSIGNMENT_DELAY o_2$D_IN;
	if (o_20$EN) o_20 <= `BSV_ASSIGNMENT_DELAY o_20$D_IN;
	if (o_21$EN) o_21 <= `BSV_ASSIGNMENT_DELAY o_21$D_IN;
	if (o_22$EN) o_22 <= `BSV_ASSIGNMENT_DELAY o_22$D_IN;
	if (o_23$EN) o_23 <= `BSV_ASSIGNMENT_DELAY o_23$D_IN;
	if (o_24$EN) o_24 <= `BSV_ASSIGNMENT_DELAY o_24$D_IN;
	if (o_25$EN) o_25 <= `BSV_ASSIGNMENT_DELAY o_25$D_IN;
	if (o_26$EN) o_26 <= `BSV_ASSIGNMENT_DELAY o_26$D_IN;
	if (o_27$EN) o_27 <= `BSV_ASSIGNMENT_DELAY o_27$D_IN;
	if (o_28$EN) o_28 <= `BSV_ASSIGNMENT_DELAY o_28$D_IN;
	if (o_29$EN) o_29 <= `BSV_ASSIGNMENT_DELAY o_29$D_IN;
	if (o_3$EN) o_3 <= `BSV_ASSIGNMENT_DELAY o_3$D_IN;
	if (o_30$EN) o_30 <= `BSV_ASSIGNMENT_DELAY o_30$D_IN;
	if (o_31$EN) o_31 <= `BSV_ASSIGNMENT_DELAY o_31$D_IN;
	if (o_4$EN) o_4 <= `BSV_ASSIGNMENT_DELAY o_4$D_IN;
	if (o_5$EN) o_5 <= `BSV_ASSIGNMENT_DELAY o_5$D_IN;
	if (o_6$EN) o_6 <= `BSV_ASSIGNMENT_DELAY o_6$D_IN;
	if (o_7$EN) o_7 <= `BSV_ASSIGNMENT_DELAY o_7$D_IN;
	if (o_8$EN) o_8 <= `BSV_ASSIGNMENT_DELAY o_8$D_IN;
	if (o_9$EN) o_9 <= `BSV_ASSIGNMENT_DELAY o_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    o_0 = 32'hAAAAAAAA;
    o_1 = 32'hAAAAAAAA;
    o_10 = 32'hAAAAAAAA;
    o_11 = 32'hAAAAAAAA;
    o_12 = 32'hAAAAAAAA;
    o_13 = 32'hAAAAAAAA;
    o_14 = 32'hAAAAAAAA;
    o_15 = 32'hAAAAAAAA;
    o_16 = 32'hAAAAAAAA;
    o_17 = 32'hAAAAAAAA;
    o_18 = 32'hAAAAAAAA;
    o_19 = 32'hAAAAAAAA;
    o_2 = 32'hAAAAAAAA;
    o_20 = 32'hAAAAAAAA;
    o_21 = 32'hAAAAAAAA;
    o_22 = 32'hAAAAAAAA;
    o_23 = 32'hAAAAAAAA;
    o_24 = 32'hAAAAAAAA;
    o_25 = 32'hAAAAAAAA;
    o_26 = 32'hAAAAAAAA;
    o_27 = 32'hAAAAAAAA;
    o_28 = 32'hAAAAAAAA;
    o_29 = 32'hAAAAAAAA;
    o_3 = 32'hAAAAAAAA;
    o_30 = 32'hAAAAAAAA;
    o_31 = 32'hAAAAAAAA;
    o_4 = 32'hAAAAAAAA;
    o_5 = 32'hAAAAAAAA;
    o_6 = 32'hAAAAAAAA;
    o_7 = 32'hAAAAAAAA;
    o_8 = 32'hAAAAAAAA;
    o_9 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkOA

